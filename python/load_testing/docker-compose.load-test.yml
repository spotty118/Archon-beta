# Load Testing Environment Configuration
# Provides isolated environment for realistic beta load testing

version: '3.8'

services:
  # Load test runner with all dependencies
  archon-load-test:
    build:
      context: .
      dockerfile: Dockerfile.load-test
    container_name: Archon-LoadTest
    environment:
      - ARCHON_BASE_URL=http://archon-api:8181
      - LOAD_TEST_SCENARIO=moderate
      - LOAD_TEST_DURATION=300
      - CONCURRENT_USERS=50
      - RAMP_UP_SECONDS=60
      - RESULTS_DIR=/app/results
    volumes:
      - ./load_test_results:/app/results
      - ./load_testing:/app/load_testing
    depends_on:
      - archon-api
      - redis
      - postgres
    networks:
      - load-test-network
    command: ["python", "-m", "load_testing.load_test_suite", "--scenario", "moderate", "--output", "/app/results/load_test_report.json"]

  # Target application services (mirrors production)
  archon-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: Archon-API-LoadTest
    ports:
      - "8181:8181"
    environment:
      - DATABASE_URL=postgresql://archon_user:archon_password@postgres:5432/archon_load_test
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=load_testing
      - LOG_LEVEL=WARNING  # Reduce logging overhead during load testing
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - load-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Database optimized for load testing
  postgres:
    image: postgres:15
    container_name: Archon-Postgres-LoadTest
    environment:
      - POSTGRES_USER=archon_user
      - POSTGRES_PASSWORD=archon_password
      - POSTGRES_DB=archon_load_test
      # Performance optimizations for load testing
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres_load_test_data:/var/lib/postgresql/data
      - ./load_testing/postgres_load_test.conf:/etc/postgresql/postgresql.conf
      - ./migration:/docker-entrypoint-initdb.d/
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - load-test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U archon_user -d archon_load_test"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis cache optimized for load testing
  redis:
    image: redis:7-alpine
    container_name: Archon-Redis-LoadTest
    command: redis-server --appendonly no --maxmemory 512mb --maxmemory-policy allkeys-lru --save ""
    networks:
      - load-test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # MCP Services for comprehensive testing
  archon-mcp:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    container_name: Archon-MCP-LoadTest
    ports:
      - "8051:8051"
    environment:
      - DATABASE_URL=postgresql://archon_user:archon_password@postgres:5432/archon_load_test
      - ENVIRONMENT=load_testing
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - load-test-network

  # Load test data seeder
  data-seeder:
    build:
      context: .
      dockerfile: Dockerfile.data-seeder
    container_name: Archon-DataSeeder
    environment:
      - DATABASE_URL=postgresql://archon_user:archon_password@postgres:5432/archon_load_test
      - SEED_DOCUMENTS=10000
      - SEED_PROJECTS=100
      - SEED_USERS=50
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - load-test-network
    volumes:
      - ./load_testing/seed_data:/app/seed_data

  # Monitoring and metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: Archon-Prometheus-LoadTest
    ports:
      - "9090:9090"
    volumes:
      - ./load_testing/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=1h'  # Short retention for load testing
    networks:
      - load-test-network

  # Grafana for real-time monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: Archon-Grafana-LoadTest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=load_test_admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./load_testing/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./load_testing/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - load-test-network

volumes:
  postgres_load_test_data:
  prometheus_data:
  grafana_data:

networks:
  load-test-network:
    driver: bridge